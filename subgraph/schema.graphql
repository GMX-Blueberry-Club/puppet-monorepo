type PriceCandle {
  id: ID!
  token: Bytes!

  interval: BigInt!
  timestamp: BigInt!

  o: BigInt!
  h: BigInt!
  l: BigInt!
  c: BigInt!
}

type RequestPosition {
  id: Bytes!
  key: Bytes!

  # status: Int!

  account: Bytes!
  receiver: Bytes!
  callbackContract: Bytes!
  uiFeeReceiver: Bytes!
  market: Bytes!
  initialCollateralToken: Bytes!

  swapPath: [Bytes!]!

  orderType: Int!
  decreasePositionSwapType: BigInt!
  sizeDeltaUsd: BigInt!
  initialCollateralDeltaAmount: BigInt!
  triggerPrice: BigInt!
  acceptablePrice: BigInt!
  executionFee: BigInt!
  callbackGasLimit: BigInt!
  minOutputAmount: BigInt!
  updatedAtBlock: BigInt!

  isLong: Boolean!
  shouldUnwrapNativeToken: Boolean!
  isFrozen: Boolean!

  # link: PositionLink!
}

type PositionIncrease {
  id: Bytes!
  # feeCollected: PositionFeesCollected! # bytes32
  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInTokens: BigInt!
  sizeInUsd: BigInt!
  collateralAmount: BigInt!
  borrowingFactor: BigInt!
  fundingFeeAmountPerSize: BigInt!
  longTokenClaimableFundingAmountPerSize: BigInt!
  shortTokenClaimableFundingAmountPerSize: BigInt!
  executionPrice: BigInt!
  indexTokenPriceMax: BigInt!
  indexTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  collateralTokenPriceMin: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  orderType: Int!

  collateralDeltaAmount: BigInt!
  priceImpactUsd: BigInt!
  priceImpactAmount: BigInt!

  isLong: Boolean!

  orderKey: Bytes!
  positionKey: Bytes!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!

  logIndex: Int!

  position: Position!
}

type PositionDecrease {
  id: Bytes!
  # feeCollected: PositionFeesCollected! # bytes32
  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  borrowingFactor: BigInt!
  fundingFeeAmountPerSize: BigInt!
  longTokenClaimableFundingAmountPerSize: BigInt!
  shortTokenClaimableFundingAmountPerSize: BigInt!
  executionPrice: BigInt!
  indexTokenPriceMax: BigInt!
  indexTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  collateralTokenPriceMin: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  valuesPriceImpactDiffUsd: BigInt!
  orderType: Int!

  priceImpactUsd: BigInt!
  basePnlUsd: BigInt!
  uncappedBasePnlUsd: BigInt!

  isLong: Boolean!

  orderKey: Bytes!
  positionKey: Bytes!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!

  logIndex: Int!

  # position: Position!

  position: Position!
}

type PositionRef {
  id: Bytes!
  position: Position!
  # mirror: MirrorPosition
}

type Position {
  id: Bytes!
  key: Bytes!

  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  realisedPnlUsd: BigInt!

  cumulativeSizeUsd: BigInt!
  cumulativeSizeToken: BigInt!
  cumulativeCollateralUsd: BigInt!
  cumulativeCollateralToken: BigInt!

  maxSizeUsd: BigInt!
  maxSizeToken: BigInt!
  maxCollateralUsd: BigInt!
  maxCollateralToken: BigInt!

  isLong: Boolean!

  increaseList: [PositionIncrease!]! @derivedFrom(field: "position")
  decreaseList: [PositionDecrease!]! @derivedFrom(field: "position")

  mirror: MirrorPosition

  isSettled: Boolean!
}

type RequestIncreasePosition__Match {
  id: Bytes! # requestKey
  trader: Bytes!
  subaccount: Bytes!
  positionKey: Bytes!

  puppetList: [Bytes!]!
  puppetCollateralDeltaList: [BigInt!]!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type RequestIncreasePosition__Adjust {
  id: Bytes! # requestKey
  trader: Bytes!
  subaccount: Bytes!
  positionKey: Bytes!

  transactionCost: BigInt!

  puppetCollateralDeltaList: [BigInt!]!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type RequestIncreasePosition__ReducePuppetSizeDelta {
  id: Bytes! # requestKey
  trader: Bytes!
  subaccount: Bytes!
  positionKey: Bytes!

  sizeDeltaUsd: BigInt!
}

type PuppetPosition {
  id: Bytes!
  key: Bytes!
  positionKey: Bytes!

  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  collateral: BigInt!

  position: MirrorPosition!
}

type MirrorPosition {
  id: Bytes!
  key: Bytes!
  positionKey: Bytes!

  trader: Bytes!

  cumulativeTransactionCost: BigInt!
  amountOut: BigInt!
  profit: BigInt!
  totalPerformanceFee: BigInt!
  traderPerformanceCutoffFee: BigInt!

  puppetList: [PuppetPosition!]! @derivedFrom(field: "position")
}

type PlatofrmPositionStats {
  id: Bytes!

  interval: BigInt!
  timestamp: BigInt!

  puppets: BigInt!

  cumulativeSizeUsd: BigInt!
  cumulativeCollateralUsd: BigInt!

  maxSizeUsd: BigInt!
  maxCollateralUsd: BigInt!

  pnl: BigInt!
  roi: BigInt!

  winCount: BigInt!
  lossCount: BigInt!
  successRate: BigInt!
}

type Market {
  id: Bytes!
  key: Bytes!
}

# type OrderSizeDeltaAutoUpdated {
#   id: Bytes!
#   key: Bytes!
#   sizeDeltaUsd: BigInt!
#   nextSizeDeltaUsd: BigInt!
# }

# type OrderCollateralDeltaAmountAutoUpdated {
#   id: Bytes!
#   key: Bytes!
#   collateralDeltaAmount: BigInt!
#   nextCollateralDeltaAmount: BigInt!
# }

# type OrderCancelled {
#   position: Position!

#   id: Bytes!
#   key: Bytes!
#   account: Bytes!
#   reason: String!
#   reasonBytes: Bytes!
# }

# type OrderFrozen {
#   position: Position!

#   id: Bytes!
#   key: Bytes!
#   account: Bytes!
#   reason: String!
#   reasonBytes: Bytes!
# }
# type PositionFeesCollected {
#   id: Bytes! # bytes32
#   position: Position! # bytes32
#   orderKey: Bytes! # bytes32
#   positionKey: Bytes! # bytes32
#   referralCode: Bytes! # bytes32
#   market: Bytes! # address
#   collateralToken: Bytes! # address
#   affiliate: Bytes! # address
#   trader: Bytes! # address
#   uiFeeReceiver: Bytes! # address
#   collateralTokenPriceMin: BigInt!
#   collateralTokenPriceMax: BigInt!
#   tradeSizeUsd: BigInt!
#   totalRebateFactor: BigInt!
#   traderDiscountFactor: BigInt!
#   totalRebateAmount: BigInt!
#   traderDiscountAmount: BigInt!
#   affiliateRewardAmount: BigInt!
#   fundingFeeAmount: BigInt!
#   claimableLongTokenAmount: BigInt!
#   claimableShortTokenAmount: BigInt!
#   latestFundingFeeAmountPerSize: BigInt!
#   latestLongTokenClaimableFundingAmountPerSize: BigInt!
#   latestShortTokenClaimableFundingAmountPerSize: BigInt!
#   borrowingFeeUsd: BigInt!
#   borrowingFeeAmount: BigInt!
#   borrowingFeeReceiverFactor: BigInt!
#   borrowingFeeAmountForFeeReceiver: BigInt!
#   positionFeeFactor: BigInt!
#   protocolFeeAmount: BigInt!
#   positionFeeReceiverFactor: BigInt!
#   feeReceiverAmount: BigInt!
#   feeAmountForPool: BigInt!
#   positionFeeAmountForPool: BigInt!
#   positionFeeAmount: BigInt!
#   totalCostAmount: BigInt!
#   uiFeeReceiverFactor: BigInt!
#   uiFeeAmount: BigInt!

#   isIncrease: Boolean!

#   blockNumber: Int!
#   blockTimestamp: Int!
#   transactionHash: Bytes!
#
#   logIndex: Int!
# }

# type PositionFeesInfo {
#   id: Bytes! # bytes32
#   position: Position! # bytes32
#   orderKey: Bytes! # bytes32
#   positionKey: Bytes! # bytes32
#   referralCode: Bytes! # bytes32
#   market: Bytes! # address
#   collateralToken: Bytes! # address
#   affiliate: Bytes! # address
#   trader: Bytes! # address
#   uiFeeReceiver: Bytes! # address
#   collateralTokenPriceMin: BigInt!
#   collateralTokenPriceMax: BigInt!
#   tradeSizeUsd: BigInt!
#   totalRebateFactor: BigInt!
#   traderDiscountFactor: BigInt!
#   totalRebateAmount: BigInt!
#   traderDiscountAmount: BigInt!
#   affiliateRewardAmount: BigInt!
#   fundingFeeAmount: BigInt!
#   claimableLongTokenAmount: BigInt!
#   claimableShortTokenAmount: BigInt!
#   latestFundingFeeAmountPerSize: BigInt!
#   latestLongTokenClaimableFundingAmountPerSize: BigInt!
#   latestShortTokenClaimableFundingAmountPerSize: BigInt!
#   borrowingFeeUsd: BigInt!
#   borrowingFeeAmount: BigInt!
#   borrowingFeeReceiverFactor: BigInt!
#   borrowingFeeAmountForFeeReceiver: BigInt!
#   positionFeeFactor: BigInt!
#   protocolFeeAmount: BigInt!
#   positionFeeReceiverFactor: BigInt!
#   feeReceiverAmount: BigInt!
#   feeAmountForPool: BigInt!
#   positionFeeAmountForPool: BigInt!
#   positionFeeAmount: BigInt!
#   totalCostAmount: BigInt!
#   uiFeeReceiverFactor: BigInt!
#   uiFeeAmount: BigInt!

#   isIncrease: Boolean!

#   blockNumber: Int!
#   blockTimestamp: Int!
#   transactionHash: Bytes!
#
#   logIndex: Int!
# }
