

type PositionRequest @entity(immutable: true) {
  id: Bytes!
  key: Bytes!

  # status: Int!

  account: Bytes!
  receiver: Bytes!
  callbackContract: Bytes!
  uiFeeReceiver: Bytes!
  market: Bytes!
  initialCollateralToken: Bytes!

  swapPath: [Bytes!]!

  orderType: Int!
  decreasePositionSwapType: BigInt!
  sizeDeltaUsd: BigInt!
  initialCollateralDeltaAmount: BigInt!
  triggerPrice: BigInt!
  acceptablePrice: BigInt!
  executionFee: BigInt!
  callbackGasLimit: BigInt!
  minOutputAmount: BigInt!
  updatedAtBlock: BigInt!

  isLong: Boolean!
  shouldUnwrapNativeToken: Boolean!
  isFrozen: Boolean!
}

type PriceCandleSeed @entity {
  id: ID!
  token: Bytes!
  interval: Int!
  timestamp: Int!
  o: BigInt!
  h: BigInt!
  l: BigInt!
  c: BigInt!
}

type PriceCandle @entity(immutable: true) {
  id: ID!
  token: Bytes!
  interval: Int!
  timestamp: BigInt!
  o: BigInt!
  h: BigInt!
  l: BigInt!
  c: BigInt!
}

type OrderSizeDeltaAutoUpdated @entity(immutable: true) {
  id: Bytes!
  key: Bytes!
  sizeDeltaUsd: BigInt!
  nextSizeDeltaUsd: BigInt!
}

type OrderCollateralDeltaAmountAutoUpdated @entity(immutable: true) {
  id: Bytes!
  key: Bytes!
  collateralDeltaAmount: BigInt!
  nextCollateralDeltaAmount: BigInt!
}

type OrderCancelled @entity(immutable: true) {
  link: PositionLink!

  id: Bytes!
  key: Bytes!
  account: Bytes!
  reason: String!
  reasonBytes: Bytes!
}

type OrderFrozen @entity(immutable: true) {
  link: PositionLink!

  id: Bytes!
  key: Bytes!
  account: Bytes!
  reason: String!
  reasonBytes: Bytes!
}


type PositionLink @entity(immutable: true) {
  id: Bytes!
  key: Bytes!

  increaseList: [PositionIncrease!]! @derivedFrom(field: "link")
  decreaseList: [PositionDecrease!]! @derivedFrom(field: "link")
  feeUpdateList: [PositionFeesCollected!]! @derivedFrom(field: "link")
}

type PositionFeesCollected @entity(immutable: true) {
  id: Bytes! # bytes32
  link: PositionLink! # bytes32

  orderKey: Bytes! # bytes32
  positionKey: Bytes! # bytes32
  referralCode: Bytes! # bytes32

  market: Bytes! # address
  collateralToken: Bytes! # address
  affiliate: Bytes! # address
  trader: Bytes! # address
  uiFeeReceiver: Bytes! # address

  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  tradeSizeUsd: BigInt!
  totalRebateFactor: BigInt!
  traderDiscountFactor: BigInt!
  totalRebateAmount: BigInt!
  traderDiscountAmount: BigInt!
  affiliateRewardAmount: BigInt!
  fundingFeeAmount: BigInt!
  claimableLongTokenAmount: BigInt!
  claimableShortTokenAmount: BigInt!
  latestFundingFeeAmountPerSize: BigInt!
  latestLongTokenClaimableFundingAmountPerSize: BigInt!
  latestShortTokenClaimableFundingAmountPerSize: BigInt!
  borrowingFeeUsd: BigInt!
  borrowingFeeAmount: BigInt!
  borrowingFeeReceiverFactor: BigInt!
  borrowingFeeAmountForFeeReceiver: BigInt!
  positionFeeFactor: BigInt!
  protocolFeeAmount: BigInt!
  positionFeeReceiverFactor: BigInt!
  feeReceiverAmount: BigInt!
  feeAmountForPool: BigInt!
  positionFeeAmountForPool: BigInt!
  positionFeeAmount: BigInt!
  totalCostAmount: BigInt!
  uiFeeReceiverFactor: BigInt!
  uiFeeAmount: BigInt!

  isIncrease: Boolean!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  # transactionIndex: BigInt!
  logIndex: Int!
}

type PositionFeesInfo @entity(immutable: true) {
  id: Bytes! # bytes32
  link: PositionLink! # bytes32

  orderKey: Bytes! # bytes32
  positionKey: Bytes! # bytes32
  referralCode: Bytes! # bytes32

  market: Bytes! # address
  collateralToken: Bytes! # address
  affiliate: Bytes! # address
  trader: Bytes! # address
  uiFeeReceiver: Bytes! # address

  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  tradeSizeUsd: BigInt!
  totalRebateFactor: BigInt!
  traderDiscountFactor: BigInt!
  totalRebateAmount: BigInt!
  traderDiscountAmount: BigInt!
  affiliateRewardAmount: BigInt!
  fundingFeeAmount: BigInt!
  claimableLongTokenAmount: BigInt!
  claimableShortTokenAmount: BigInt!
  latestFundingFeeAmountPerSize: BigInt!
  latestLongTokenClaimableFundingAmountPerSize: BigInt!
  latestShortTokenClaimableFundingAmountPerSize: BigInt!
  borrowingFeeUsd: BigInt!
  borrowingFeeAmount: BigInt!
  borrowingFeeReceiverFactor: BigInt!
  borrowingFeeAmountForFeeReceiver: BigInt!
  positionFeeFactor: BigInt!
  protocolFeeAmount: BigInt!
  positionFeeReceiverFactor: BigInt!
  feeReceiverAmount: BigInt!
  feeAmountForPool: BigInt!
  positionFeeAmountForPool: BigInt!
  positionFeeAmount: BigInt!
  totalCostAmount: BigInt!
  uiFeeReceiverFactor: BigInt!
  uiFeeAmount: BigInt!

  isIncrease: Boolean!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  # transactionIndex: BigInt!
  logIndex: Int!
}

type PositionIncrease @entity(immutable: true) {
  id: Bytes!
  link: PositionLink!
  feeCollected: PositionFeesCollected! # bytes32

  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInTokens: BigInt!
  sizeInUsd: BigInt!
  collateralAmount: BigInt!
  borrowingFactor: BigInt!
  fundingFeeAmountPerSize: BigInt!
  longTokenClaimableFundingAmountPerSize: BigInt!
  shortTokenClaimableFundingAmountPerSize: BigInt!
  executionPrice: BigInt!
  indexTokenPriceMax: BigInt!
  indexTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  collateralTokenPriceMin: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  orderType: Int!

  collateralDeltaAmount: BigInt!
  priceImpactUsd: BigInt!
  priceImpactAmount: BigInt!

  isLong: Boolean!

  orderKey: Bytes!
  positionKey: Bytes!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  # transactionIndex: BigInt!
  logIndex: Int!
}

type PositionDecrease @entity(immutable: true) {
  id: Bytes!
  link: PositionLink!
  feeCollected: PositionFeesCollected! # bytes32

  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  borrowingFactor: BigInt!
  fundingFeeAmountPerSize: BigInt!
  longTokenClaimableFundingAmountPerSize: BigInt!
  shortTokenClaimableFundingAmountPerSize: BigInt!
  executionPrice: BigInt!
  indexTokenPriceMax: BigInt!
  indexTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  collateralTokenPriceMin: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  valuesPriceImpactDiffUsd: BigInt!
  orderType: Int!

  priceImpactUsd: BigInt!
  basePnlUsd: BigInt!
  uncappedBasePnlUsd: BigInt!

  isLong: Boolean!

  orderKey: Bytes!
  positionKey: Bytes!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  # transactionIndex: BigInt!
  logIndex: Int!
}

type PositionOpen @entity {
  id: ID! # bytes32
  key: Bytes! # bytes32

  link: PositionLink! # bytes32

  account: Bytes! # address
  market: Bytes! # address
  collateralToken: Bytes! # address
  # indexToken: Bytes! # address

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  realisedPnlUsd: BigInt!

  cumulativeSizeUsd: BigInt!
  cumulativeSizeToken: BigInt!
  cumulativeCollateralUsd: BigInt!
  cumulativeCollateralToken: BigInt!

  maxSizeUsd: BigInt!
  maxSizeToken: BigInt!
  maxCollateralUsd: BigInt!
  maxCollateralToken: BigInt!

  isLong: Boolean!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  # transactionIndex: BigInt!
  logIndex: Int!
}

type PositionSettled @entity(immutable: true) {
  id: Bytes!
  key: Bytes! # bytes32

  link: PositionLink! # bytes32

  account: Bytes! # address
  market: Bytes! # address
  collateralToken: Bytes! # address
  # indexToken: Bytes! # address

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  realisedPnlUsd: BigInt!

  cumulativeSizeUsd: BigInt!
  cumulativeSizeToken: BigInt!
  cumulativeCollateralUsd: BigInt!
  cumulativeCollateralToken: BigInt!

  maxSizeUsd: BigInt!
  maxSizeToken: BigInt!
  maxCollateralUsd: BigInt!
  maxCollateralToken: BigInt!

  isLong: Boolean!

  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  # transactionIndex: BigInt!
  logIndex: Int!
}
